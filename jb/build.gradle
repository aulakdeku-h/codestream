plugins {
    id "java"
    id "idea"
    id "org.jetbrains.intellij" version "1.6.0"
    id "org.jetbrains.kotlin.jvm" version "1.6.10"
    id "de.undercouch.download" version "5.1.0"
}

group "com.codestream"
version "13.1.2"

sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    maven { url = "https://europe-maven.pkg.dev/jxbrowser/releases" }
    maven { url = "https://www.jetbrains.com/intellij-repository/snapshots" }
}

ext {
    jxBrowserVersion = "7.18"
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.6.10"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.5.2"

    implementation "com.teamdev.jxbrowser:jxbrowser:${jxBrowserVersion}"
    implementation "com.teamdev.jxbrowser:jxbrowser-swing:${jxBrowserVersion}"

    implementation "org.eclipse.lsp4j:org.eclipse.lsp4j:0.12.0"
    implementation "com.github.salomonbrys.kotson:kotson:2.5.0"
    implementation("io.sentry:sentry:1.7.27") {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    implementation "commons-io:commons-io:2.7"
    implementation "org.reflections:reflections:0.9.12"

    testImplementation "io.mockk:mockk:1.12.4"
    testImplementation "io.kotest:kotest-assertions-core:5.3.1"

//    compileOnly(files("lib/app.jar"))
}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
}

compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
}

patchPluginXml {
    changeNotes = "${file('docs/change-notes.html').getText('UTF-8')}"
    pluginDescription = "${file('docs/description.html').getText('UTF-8')}"
}

idea {
    module {
        excludeDirs += file("src/main/resources/agent")
        excludeDirs += file("src/main/resources/webview")
    }
}


intellij {
//    type = "RD"
    type = "IU"
    // the version parameter dictates which jars will be used at compilation time

    version = "2021.2.1" // earliest version we support
    // version = "2022.1.1" // Rider version

    // version "201.5616-EAP-CANDIDATE-SNAPSHOT"
    // version "2019.2.3"
    // version "2019.3"
    // version "IC-2019.2.2"
    // version "2018.3.4" // you can also specify dot dot releases
    // version "IC-2018.2.7" //
    // version "PC-2018.2"

    intellij.updateSinceUntilBuild = false

    // sandboxDir = "$System.env.HOME/ide-sandbox" // It is sometimes useful to not have IDE config inside source control

    plugins = ['java', 'git4idea', 'org.jetbrains.plugins.go:212.5080.55', 'Pythonid:212.5080.64', 'org.jetbrains.plugins.ruby:212.5080.8']
}

runIde {
//    jbrVersion "8u202b1483.58"
//    jbrVersion "11_0_2b159"
//    jvmArgs '-Dsun.java2d.uiScale.enabled=false'
//    jvmArgs '-Dkotlinx.coroutines.debug=on'
//    jvmArgs '-Dcom.codestream.recordRequests=true'
    jvmArgs "-Dcom.codestream.webview=$projectDir/src/main/resources/webview"
    jvmArgs "-Dcom.codestream.agent=$projectDir/../shared/agent/dist"
    jvmArgs '-Xmx2048m'
    jvmArgs '-Xms128m'
    // M1 mac workaround - for now need to run on a locally installed IDE, different from the build dependency
    // specified via type/version
    // set ideDir in ~/.gradle/gradle.properties i.e. ideDir=/Applications/IntelliJ IDEA.app/Contents
    if (project.ideDir && !project.ideDir.isEmpty()) {
        ideDir.set(file(project.ideDir))
    }
}

import org.gradle.internal.os.OperatingSystem

task buildDeps(type: Exec) {
    String npm = 'npm';
    if (OperatingSystem.current().isWindows()) {
        npm = 'npm.cmd'
    }

    workingDir "$projectDir"
    commandLine npm, 'run', 'bundle'
}

task buildDepsMac(type: Exec) {
    workingDir "$projectDir"
    commandLine 'npm', 'run', 'bundle:mac'
}

task copyAgent(type: Copy) {
    from "$projectDir/../shared/agent/dist"
    include "**/*"
    into "$projectDir/src/main/resources/agent"
}

task copyProtobuf(type: Copy) {
    from "$projectDir/../shared/protobuf"
    include "**/*"
    into "$projectDir/src/main/resources/protobuf"
}

def createDownloadNodeTask(String platform, String executableName) {
    String taskName = "downloadNode-" + platform
    String assetsRoot = 'http://assets.codestream.us/artifacts/node'
    String nodeVersion = 'v16.13.2'
    return tasks.create(taskName, Download) {
        src([
                "$assetsRoot/node-$nodeVersion-${platform}/${executableName}",
                "$assetsRoot/node-$nodeVersion-${platform}/LICENSE",
        ])
        dest "$projectDir/src/main/resources/agent/node-${platform}"
        onlyIfModified true
    }
}

task downloadNode {}
downloadNode.dependsOn (
    createDownloadNodeTask("darwin-arm64", "node"),
    createDownloadNodeTask("darwin-x64", "node"),
    createDownloadNodeTask("linux-x64", "node"),
    createDownloadNodeTask("win-x64", "node.exe")
)

task buildDependencies {}
buildDependencies.dependsOn buildDeps, copyAgent, copyProtobuf

task buildDependenciesMac {}
buildDependenciesMac.dependsOn buildDepsMac, copyAgent, copyProtobuf

buildPlugin.dependsOn downloadNode, buildDependencies

task buildDebugDeps(type: Exec) {
    String npm = 'npm';
    if (OperatingSystem.current().isWindows()) {
        npm = 'npm.cmd'
    }

    workingDir "$projectDir"
    commandLine npm, 'run', 'build'
}

task copyDebugAgent(type: Copy) {
    from "$projectDir/../shared/agent/dist"
    include "**/*"
    into "$projectDir/src/main/resources/agent"
}
copyDebugAgent.dependsOn buildDebugDeps

task buildDebugDependencies {}
buildDebugDependencies.dependsOn buildDebugDeps, copyDebugAgent, copyProtobuf











